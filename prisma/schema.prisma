generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model users {
  id                Int                 @id @default(autoincrement())
  first_name        String              @db.VarChar(45)
  last_name         String              @db.VarChar(45)
  email             String              @db.VarChar(45)
  password          String              @db.VarChar(256)
  description       String?             @db.Text
  despensa          despensa[]
  recetas_favoritas recetas_favoritas[]
  shop_list         shop_list[]
}

model despensa {
  id              Int     @id @default(autoincrement())
  nombre_alimento String? @db.Text
  cantidad        Int?
  unidad_medida   String
  tipo_alimento   String? @db.Text
  user_id         Int
  users           users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_la_ptqp")

  @@index([user_id], map: "user_id_idx")
}

model ingredientes {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @db.VarChar(45)
  categoria            String?                @db.VarChar(45)
  unidad_medida        String?                @db.VarChar(45)
  recetas_ingredientes recetas_ingredientes[]
}

model recetas {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @db.Text
  descripcion          String?                @db.Text
  ingredientes         String?                @db.Text
  instrucciones        String?                @db.Text
  tiempo_preparacion   String?
  id_user              Int
  recetas_ingredientes recetas_ingredientes[]
  recomendados         recomendados[]

  @@index([id_user], map: "id_user_idx")
}

model destacados {
  id                 Int     @id @default(autoincrement())
  nombre             String  @db.Text
  descripcion        String? @db.Text
  ingredientes       String? @db.Text
  instrucciones      String? @db.Text
  tiempo_preparacion String?
}

model recetas_favoritas {
  id                 Int     @id @default(autoincrement())
  nombre             String  @db.Text
  descripcion        String? @db.Text
  ingredientes       String? @db.Text
  instrucciones      String? @db.Text
  tiempo_preparacion String?
  users              users?  @relation(fields: [usersId], references: [id])
  usersId            Int?

  @@index([usersId])
}

model recetas_ingredientes {
  id             Int           @id @default(autoincrement())
  receta_id      Int?
  ingrediente_id Int?
  cantidad       Int?
  ingredientes   ingredientes? @relation(fields: [ingrediente_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ingrediente_id")
  recetas        recetas?      @relation(fields: [receta_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "receta_id")

  @@index([ingrediente_id], map: "ingrediente_id_idx")
  @@index([receta_id], map: "receta_id_idx")
}

model recomendados {
  idrecomendados          Int     @id @default(autoincrement())
  id_recomendados_recipes Int
  recetas                 recetas @relation(fields: [id_recomendados_recipes], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_recomendados_recipes")

  @@index([id_recomendados_recipes], map: "id_recomendados_recipes_idx")
}

model shop_list {
  id              Int     @id @default(autoincrement())
  nombre_alimento String? @db.Text
  cantidad        Int?
  unidad_medida   String
  tipo_alimento   String? @db.Text
  user_id         Int
  users           users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")

  @@index([user_id], map: "user_id_idx")
}
